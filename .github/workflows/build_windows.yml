name: build

on: [push]
    

jobs:
      
  Build-Libs-OpenVPN-Windows:
    strategy:
      fail-fast: false
      matrix:
        target: [mingw64, mingw]
        include:
          - target: mingw64
            chost: x86_64-w64-mingw32
          - target: mingw
            chost: i686-w64-mingw32

    name: "gcc-mingw - ${{matrix.target}} - OSSL 1.1.1t"
    runs-on: ubuntu-22.04
    env:
      MAKEFLAGS: -j3
      LZO_VERSION: "2.10"
      PKCS11_HELPER_VERSION: "1.29.0"
      OPENSSL_VERSION: "1.1.1t"
      TAP_WINDOWS_VERSION: "9.23.3"
      CMOCKA_VERSION: "1.1.5"
    steps:
      - name: Install dependencies
        run: sudo apt update && sudo apt install -y mingw-w64 libtool automake autoconf man2html unzip cmake ninja-build build-essential wget

      - name: 'Get sources'
        uses: actions/checkout@v3
        with:
          submodules: 'true'
          fetch-depth: 10

      - name: 'Get openvpn'
        uses: actions/checkout@v3
        with:
          repository: OpenVPN/openvpn
          ref: release/2.6
          path: windows/openvpn

      - name: autoconf
        run: autoreconf -fvi
        working-directory: windows/openvpn

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '~/mingw/'
          key: ${{ matrix.target }}-mingw-${{ env.OPENSSL_VERSION }}-${{ env.LZO_VERSION }}-${{ env.PKCS11_HELPER_VERSION }}-${{ env.TAP_WINDOWS_VERSION }}--${{ env.CMOCKA_VERSION }}

      # Repeating  if: steps.cache.outputs.cache-hit != 'true'
      # on every step for building dependencies is ugly but
      # I haven't found a better solution so far.

      - name: Download mingw dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget -c -P download-cache/ "https://build.openvpn.net/downloads/releases/tap-windows-${TAP_WINDOWS_VERSION}.zip"
          wget -c -P download-cache/ "https://www.oberhumer.com/opensource/lzo/download/lzo-${LZO_VERSION}.tar.gz"
          wget -c -P download-cache/ "https://github.com/OpenSC/pkcs11-helper/releases/download/pkcs11-helper-${PKCS11_HELPER_VERSION}/pkcs11-helper-${PKCS11_HELPER_VERSION}.tar.bz2"
          wget -c -P download-cache/ "https://github.com/coreboot/cmocka/archive/refs/tags/cmocka-${CMOCKA_VERSION}.tar.gz"
          tar jxf "download-cache/pkcs11-helper-${PKCS11_HELPER_VERSION}.tar.bz2"
          wget -c -P download-cache/ "https://www.openssl.org/source/old/1.1.1/openssl-${OPENSSL_VERSION}.tar.gz" || wget -c -P download-cache/ "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz"
          tar zxf "download-cache/openssl-${OPENSSL_VERSION}.tar.gz"
          tar zxf "download-cache/lzo-${LZO_VERSION}.tar.gz"
          tar zxf "download-cache/cmocka-${CMOCKA_VERSION}.tar.gz"
          unzip download-cache/tap-windows-${TAP_WINDOWS_VERSION}.zip

      - name: create cmocka build directory
        if: steps.cache.outputs.cache-hit != 'true'
        run: mkdir cmocka-build

      - name: configure cmocka
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: "./cmocka-build"
        run: cmake -GNinja -DCMAKE_C_COMPILER=${{ matrix.chost }}-gcc -DCMAKE_CXX_COMPILER=${{ matrix.chost }}-g++ -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SHARED_LINKER_FLAGS=-static-libgcc -DCMAKE_PREFIX_PATH=${HOME}/mingw/opt/lib/pkgconfig/ -DCMAKE_INCLUDE_PATH=${HOME}/mingw/opt/lib/include -DCMAKE_LIBRARY_PATH=${HOME}/mingw/opt/lib -DCMAKE_INSTALL_PREFIX=${HOME}/mingw/opt/ ../cmocka-cmocka-${{ env.CMOCKA_VERSION }}

      - name: build cmocka
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: "./cmocka-build"
        run: ninja

      - name: install cmocka
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: "./cmocka-build"
        run: ninja install

      - name: Configure OpenSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./Configure --cross-compile-prefix=${{ matrix.chost }}- shared ${{ matrix.target }} no-capieng --prefix="${HOME}/mingw/opt" --openssldir="${HOME}/mingw/opt" -static-libgcc
        working-directory: "./openssl-${{ env.OPENSSL_VERSION }}"

      - name: Build OpenSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: make
        working-directory: "./openssl-${{ env.OPENSSL_VERSION }}"

      # OpenSSL 3.0.5 installs itself into mingw/opt/lib64 instead of
      # mingw/opt/lib, so we include both dirs in the following steps
      # (pkcs11-helper and OpenVPN) so the libraries will be found
      - name: Install OpenSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: make install
        working-directory: "./openssl-${{ env.OPENSSL_VERSION }}"

      - name: autoreconf pkcs11-helper
        if: steps.cache.outputs.cache-hit != 'true'
        run: autoreconf -iv
        working-directory: "./pkcs11-helper-${{ env.PKCS11_HELPER_VERSION }}"

      - name: configure pkcs11-helper
        if: steps.cache.outputs.cache-hit != 'true'
        run: OPENSSL_LIBS="-L${HOME}/mingw/opt/lib -L${HOME}/mingw/opt/lib64 -lssl -lcrypto" OPENSSL_CFLAGS=-I$HOME/mingw/opt/include PKG_CONFIG_PATH=${HOME}/mingw/opt/lib/pkgconfig ./configure --host=${{ matrix.chost }} --program-prefix='' --libdir=${HOME}/mingw/opt/lib --prefix=${HOME}/mingw/opt --build=x86_64-pc-linux-gnu --disable-crypto-engine-gnutls --disable-crypto-engine-nss --disable-crypto-engine-polarssl --disable-crypto-engine-mbedtls
        working-directory: "./pkcs11-helper-${{ env.PKCS11_HELPER_VERSION }}"

      - name: build pkcs11-helper
        if: steps.cache.outputs.cache-hit != 'true'
        run: make all
        working-directory: "./pkcs11-helper-${{ env.PKCS11_HELPER_VERSION }}"

      - name: install pkcs11-helper
        if: steps.cache.outputs.cache-hit != 'true'
        run: make install
        working-directory: "./pkcs11-helper-${{ env.PKCS11_HELPER_VERSION }}"

      - name: Configure lzo
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./configure --host=${{ matrix.chost }} --program-prefix='' --libdir=${HOME}/mingw/opt/lib --prefix=${HOME}/mingw/opt --build=x86_64-pc-linux-gnu
        working-directory: "./lzo-${{ env.LZO_VERSION }}"

      - name: build lzo
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: "./lzo-${{ env.LZO_VERSION }}"
        run: make

      - name: install lzo
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: "./lzo-${{ env.LZO_VERSION }}"
        run: make install

      - name: copy tap-windows.h header
        if: steps.cache.outputs.cache-hit != 'true'
        run: cp ./tap-windows-${TAP_WINDOWS_VERSION}/include/tap-windows.h ${HOME}/mingw/opt/include/

      - name: configure OpenVPN
        run: PKG_CONFIG_PATH=${HOME}/mingw/opt/lib/pkgconfig LDFLAGS=-L$HOME/mingw/opt/lib CFLAGS=-I$HOME/mingw/opt/include OPENSSL_LIBS="-L${HOME}/opt/lib -L$HOME/mingw/opt/lib64 -lssl -lcrypto" OPENSSL_CFLAGS=-I$HOME/mingw/opt/include PREFIX=$HOME/mingw/opt LZO_CFLAGS=-I$HOME/mingw/opt/include LZO_LIBS="-L${HOME}/mingw/opt/lib -llzo2" ./configure  --host=${{ matrix.chost }} --disable-lz4  
        working-directory: windows/openvpn
      
      - name: build OpenVPN
        run: make -j3
        working-directory: windows/openvpn
        
      - name: build OpenVPN unittests
        run: make -j3 check
        working-directory: windows/openvpn

      # We use multiple upload-artifact here, so it becomes a flat folder
      # structure since we need the dlls on the same level as the binaries
      - name: Archive cmocka/openssl/lzo dlls
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: mingw-unittest-${{matrix.target}}-ossl${{ env.OPENSSL_VERSION }}-dlls
          path: '~/mingw/opt/bin/*.dll'

      # libtool puts some wrapper binaries in openvpn/tests/unit_tests/openvpn/
      # and the real binaries in openvpn/tests/unit_tests/openvpn/.libs/
      - name: Archive unittest artifacts
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: mingw-unittest-${{matrix.target}}-ossl${{ env.OPENSSL_VERSION }}-tests
          path: windows/openvpn/tests/unit_tests/openvpn/.libs/*.exe

      # Currently not used by the unit test but might in the future and also
      # helpful if manually downloading and running openvpn.exe from a mingw
      # build
      - name: Archive openvpn binary
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: mingw-unittest-${{matrix.target}}-ossl${{ env.OPENSSL_VERSION }}-tests
          path: windows/openvpn/src/openvpn/.libs/*.exe


